import java.awt.Point;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Stack;


public class Greedy {
	protected ArrayList<Board> moves = new ArrayList<Board>();
	protected HashSet<Board> seenBoard = new HashSet<Board>();
	protected Stack<Board> boardStack = new Stack<Board>();
	protected ArrayList<Block> availBlocks = new ArrayList<Block>();
	protected Board Goal;
	public Greedy(Board board, Board goal){
		boardStack.push(board);
		availBlocks = board.avail;
		Goal = goal;
	}
	protected void stackSearch(){
		while(!boardStack.isEmpty()){
			Board tempBoard = boardStack.pop();
			moves.add(tempBoard);
			seenBoard.add(tempBoard);
			if(tempBoard.matchGoal(Goal)){
				return;
			}
			allMoves(tempBoard);
		}
		System.out.println(boardStack.size());
	}
	protected void allMoves(Board board){
		for(int k =0; k<availBlocks.size()-1;k++){
			ArrayList<String> temp = board.okayMoves(availBlocks.get(k));
			System.out.println(temp);
			Board anotherBoard = board;
			if(temp.contains("Up")){
				anotherBoard.moveUp(availBlocks.get(k));
				boardStack.push(anotherBoard);
				if(anotherBoard.matchGoal(Goal)){
					return;
				}
			}
			Board anotherBoard2 = board;
			if(temp.contains("Down")){
				anotherBoard2.moveDown(availBlocks.get(k));
				boardStack.push(anotherBoard2);
				if(anotherBoard2.matchGoal(Goal)){
					return;
				}
			}
			Board anotherBoard3 = board;
			if(temp.contains("Left")){
				anotherBoard3.moveLeft(availBlocks.get(k));
				boardStack.push(anotherBoard3);
				if(anotherBoard3.matchGoal(Goal)){
					return;
				}
			}
			Board anotherBoard4 = board;
			if(temp.contains("Right")){
				anotherBoard4.moveRight(availBlocks.get(k));
				boardStack.push(anotherBoard4);
				if(anotherBoard4.matchGoal(Goal)){
					return;
				}
			}
		}
	}
	
	protected void printAnswer(){
		for(int k =0; k<moves.size();k++){
			moves.get(k).printBoard();
		}
	}

	protected static int heuristic(Point Start, Point goal){ //the heuristic
		int h = (int)Math.sqrt(Math.pow(goal.x-Start.x, 2)+Math.pow(goal.y-Start.y, 2));
		return h;
	}
	

}
