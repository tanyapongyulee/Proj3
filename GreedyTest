import static org.junit.Assert.*;

import org.junit.Test;


public class GreedyTest {

  @Test
	public void testGreedyConstructor(){
	  System.out.println("start");
	  	Board b = new Board("1x1.txt");
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("1x1.goal.txt",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
	  	assertTrue(s.boardStack.peek().equals(b));
	  	assertTrue(s.Goal.equals(g));
	  	
	  	Board b2 = new Board("140x140.txt");
		b2.buildBoard();
		b2.placeBlocks();
		Board g2 = new Board("140x140.goal.txt",b2.getLength(),b2.getWidth());
		Greedy s2 = new Greedy(b2,g2);
	  	assertTrue(s2.boardStack.peek().equals(b2));
	  	assertTrue(s2.Goal.equals(g2));
	  	
  }
  @Test
  	public void testMatchGoal(){
	  
	  Board b = new Board("instant.match.0.txt");   // instant match;
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("instant.match.0.goal.txt",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
		assertTrue(s.matchGoal(b,g));
		
	  	Board b2 = new Board("instant.match.1+90.txt"); 
		b2.buildBoard();
		b2.placeBlocks();
		Board g2 = new Board("instant.match.1+90.goal.txt",b2.getLength(),b2.getWidth());
		Greedy s2 = new Greedy(b2,g2);
		assertTrue(s2.matchGoal(b2,g2));
		
  }
  @Test
  public void testPrintAns(){
	  
  }
  @Test
  
	public void testStackSearchSame() {
	  Board b = new Board("instant.match.0.txt");   // instant match;
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("instant.match.0.goal.txt",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
		assertTrue(s.possible());
		s.stackSearch();
		
	  	
	  	Board b2 = new Board("instant.match.1+90.txt"); 
		b2.buildBoard();
		b2.placeBlocks();
		Board g1 = new Board("instant.match.1+90.goal.txt",b2.getLength(),b2.getWidth());
		Greedy s1 = new Greedy(b2,g1);
		assertTrue(s1.possible());
		s1.stackSearch();
		s1.printAnswer();
		System.out.println("ans1: to immed match");
  }
  
  @Test 
  
  public void testStackSearch0(){
	  
	  Board b = new Board("immed.match.0");   // immediate match test1;
	  	b.buildBoard();
		b.placeBlocks();
		System.out.println("ans1: to immed match");
		Board g = new Board("immed.match.0.goal",b.getLength(),b.getWidth());
		g.printBoard();
		Greedy s = new Greedy(b,g);
		//assertTrue(s.possible());
		s.stackSearch();
		System.out.println("ans1: to immed match");
		s.printAnswer();
		
		
	  	
	  	Board b2 = new Board("immed.match.2+270.txt"); // immediate match test1;
	  	System.out.println("tfdoifjs");
		b2.buildBoard();
		b2.placeBlocks();
		Board g1 = new Board("immed.match.2+270.goal.txt",b2.getLength(),b2.getWidth());
		 System.out.println("hi");
		Greedy s1 = new Greedy(b2,g1);
		assertTrue(s1.possible());
		s1.stackSearch();
		//s1.printAnswer();	  
  }
  @Test
	public void testStackSearchImpossible() {
	  Board b = new Board("impossible.1");   // impossible match test1
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("impossible.1.goal",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
		assertFalse(s.possible());
		s.stackSearch();
		//s.printAnswer();
	  	
	  	Board b2 = new Board("impossible.3");  // impossible match test2
		b2.buildBoard();
		b2.placeBlocks();
		Board g2 = new Board("impossible.3.goal",b2.getLength(),b2.getWidth());
		Greedy s2 = new Greedy(b2,g2);
		assertFalse(s2.possible());
		s2.stackSearch();
		//s1.printAnswer();
		
		Board b3 = new Board("impossible.3x4");  // impossible match test3
		b3.buildBoard();
		b3.placeBlocks();
		Board g3 = new Board("impossible.3x4.goal.1",b3.getLength(),b3.getWidth());
		Greedy s3 = new Greedy(b3,g3); 
		assertFalse(s3.possible());
		
}
  
  @Test
	public void testStackSearch1() {
		Board b = new Board("1x1.txt");   // simple one block board
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("1x1.goal.txt",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
		assertTrue(s.possible());
		s.stackSearch();
		//s.printAnswer();
	  	
	  	Board b2 = new Board("140x140.txt"); // simple 140x140 test1
		b2.buildBoard();
		b2.placeBlocks();
		Board g1 = new Board("140x140.goal.txt",b2.getLength(),b2.getWidth());
		Greedy s1 = new Greedy(b2,g1);
		assertTrue(s1.possible());
		s1.stackSearch();
		//s1.printAnswer();
		
		Board g2 = new Board("140x140.goal.1.txt",b2.getLength(),b2.getWidth());  // simple 140x140 test2
		Greedy s2 = new Greedy(b2,g2); 
		assertTrue(s2.possible());
		
		Board g3 = new Board("140x140.impossible.goal.txt",b2.getLength(),b2.getWidth()); // simple 140x140 test3
		Greedy s3 = new Greedy(b2,g3); 
		assertFalse(s3.possible());
						
	}
	@Test
	public void testStackSearch2() {
		Board b = new Board("dads");   //medium test1
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("dads.goal",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
		assertTrue(s.possible());
		s.stackSearch();
		//s.printAnswer();
		b.printBoard();
		
		Board b2 = new Board("dads+270");  //medium test2
		b2.buildBoard();
		b2.placeBlocks();
		Board g2 = new Board("dads+270.goal",b.getLength(),b.getWidth());
		Greedy s2 = new Greedy(b2,g2);
		assertTrue(s2.possible());
		s2.stackSearch();
		//s.printAnswer();
		b.printBoard();
	}
	
	@Test
	public void testStackSearch3() {
		Board b = new Board("c22");   //hard test1
		b.buildBoard();
		b.placeBlocks();
		Board g = new Board("22.goal",b.getLength(),b.getWidth());
		Greedy s = new Greedy(b,g);
		assertTrue(s.possible());
		s.stackSearch();
		//s.printAnswer();
		
		Board b2 = new Board("c53");  //hard test2
		b2.buildBoard();
		b2.placeBlocks();
		Board g2 = new Board("53.54.64.goal",b.getLength(),b.getWidth());
		Greedy s2 = new Greedy(b2,g2);
		assertTrue(s2.possible());
		s2.stackSearch();
		//s.printAnswer();
		
		Board b3 = new Board("c54");  //hard test3
		b3.buildBoard();
		b3.placeBlocks();
		Greedy s3 = new Greedy(b3,g2);
		assertTrue(s3.possible());
		s3.stackSearch();
		//s.printAnswer();
		
		Board b4 = new Board("c64");  //hard test4
		b4.buildBoard();
		b4.placeBlocks();
		Greedy s4 = new Greedy(b4,g2);
		assertTrue(s4.possible());
		s4.stackSearch();
		//s.printAnswer();
		
	}
	
	
	
  
	

}
