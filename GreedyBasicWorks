

import java.awt.Point;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Stack;


// remember to update contain method to check hashset?
public class Greedy {
	protected ArrayList<Board> moves = new ArrayList<Board>(); 
	protected HashMap<Board,String> PrintableMoves = new HashMap<Board,String>(); // new
	protected HashSet<Board> seenBoard = new HashSet<Board>();
	protected Stack<Board> boardStack = new Stack<Board>();
	protected ArrayList<Block> availBlocks = new ArrayList<Block>();
	protected Board Goal;
	protected Board Original; //new
	public Greedy(Board board, Board goal){
		Original=board;
		boardStack.push(board);
		availBlocks = board.avail;
		Goal = goal;
	}
	protected void stackSearch(){
        while(!boardStack.isEmpty()){
            Board tempBoard = boardStack.pop();
            moves.add(tempBoard);
            seenBoard.add(tempBoard);
            if(this.matchGoal(tempBoard, Goal)){
            	System.out.println("A matched goal!"); 
                return;
            }else{
            	allMoves(tempBoard);
            }
        }
		//System.out.println(boardStack.size());
		System.out.println("Solution Found!");   //new
	}
	protected void allMoves(Board board){
		for(int k =0; k<availBlocks.size()-1;k++){
			ArrayList<String> temp = board.okayMoves(availBlocks.get(k)); // avail to move?
			//System.out.println(temp);
			if(temp.size()!=0){
			Board anotherBoard=board.copyBoard();			
			if(temp.contains("Up")){                              
				anotherBoard.moveUp(availBlocks.get(k));
				if(!seenBoard.contains(anotherBoard)){       // check if board has seen
					boardStack.push(anotherBoard);
					savedMoves(anotherBoard,availBlocks.get(k),"Up"); //save the move
					if(matchGoal(anotherBoard,Goal)){
						return;
					}		
				}
			}
			Board anotherBoard2=board.copyBoard();	
			if(temp.contains("Down")){
				anotherBoard2.moveDown(availBlocks.get(k));
				if(!seenBoard.contains(anotherBoard)){       // check if board has seen
					boardStack.push(anotherBoard);
					savedMoves(anotherBoard,availBlocks.get(k),"Down"); //save the move
					if(matchGoal(anotherBoard2,Goal)){
						return;
					}	
				}
			}
			Board anotherBoard3=board.copyBoard();	
			if(temp.contains("Left")){
				anotherBoard3.moveLeft(availBlocks.get(k));
				if(!seenBoard.contains(anotherBoard)){       // check if board has seen
					boardStack.push(anotherBoard);
					savedMoves(anotherBoard,availBlocks.get(k),"Left"); //save the move
					if(matchGoal(anotherBoard3,Goal)){
						return;
					}
				}
			}
			Board anotherBoard4=board.copyBoard();	
			if(temp.contains("Right")){
				anotherBoard4.moveRight(availBlocks.get(k));
				if(!seenBoard.contains(anotherBoard)){       // check if board has seen
					boardStack.push(anotherBoard);
					savedMoves(anotherBoard,availBlocks.get(k),"Down"); //save the move
					if(matchGoal(anotherBoard4,Goal)){
						return;
					}
				}
			}
			}
		}
			
		
	}
	protected void savedMoves(Board board, Block block, String s){ // input new board after moving a specific block, the block, how the block was moved
		String str="";
		if(s=="Up"){
			str=str+Integer.toString(block.getTop().x+1)+" "+Integer.toString(block.getTop().y)+" ";
		}
		else if(s=="Down"){
			str=str+Integer.toString(block.getTop().x-1)+" "+Integer.toString(block.getTop().y)+" ";
		}
		else if(s=="Left"){
			str=str+Integer.toString(block.getTop().x)+" "+Integer.toString(block.getTop().y+1)+" ";
		}
		else if(s=="Right"){
			str=str+Integer.toString(block.getTop().x)+" "+Integer.toString(block.getTop().y-1)+" ";
		}
		str=str+Integer.toString(block.getTop().x)+" "+Integer.toString(block.getTop().y)+" ";
		PrintableMoves.put(board, str);
	}
	protected void printAnswer(){
		for(int k =1; k<moves.size();k++){
			String s=PrintableMoves.get(moves.get(k));
			System.out.println(s);
		}
	}
	
	
	public boolean possible(){  //edit
		boolean result=true;
		if(availBlocks.size()==0){
			result=true;
		}
		
		
		return result;
	}

    protected static int heuristic(Point Start, Point goal){ //the heuristic
        int h = (int)Math.sqrt(Math.pow(goal.x-Start.x, 2)+Math.pow(goal.y-Start.y, 2));
        return h;
    }
    public boolean matchGoal(Board board, Board goal){
        ArrayList<Block> compare = new ArrayList<Block>();
        HashSet<Block> alreadyChecked = new HashSet<Block>();
        int count =0;
        for(int k =0; k<goal.avail.size();k++){
            for(int g =0; g<board.avail.size();g++){
                if(board.avail.get(g).equals(goal.avail.get(k))&&!alreadyChecked.contains(board.avail.get(g))){
                    g= board.avail.size();
                    count++;
                }
                if(g!= board.avail.size()){
                alreadyChecked.add(board.avail.get(g));
                }
            }
        }
        //System.out.println(count+" "+goal.avail.size());
        if (count==goal.avail.size()){
            return true;
        } else{
            return false;
        }


    }
    
   
}
